{"input":{"location":{"$mid":1,"fsPath":"/home/soflyy_cash/.codeoss/extensions/extensions.json","external":"file:///home/soflyy_cash/.codeoss/extensions/extensions.json","path":"/home/soflyy_cash/.codeoss/extensions/extensions.json","scheme":"file"},"mtime":1743211017537,"profile":true,"profileScanOptions":{"bailOutWhenFileNotFound":true},"type":1,"excludeObsolete":true,"validate":true,"productVersion":"1.94.2-cde","productDate":"2025-03-23T07:13:37.386Z","productCommit":"a91b609b237c676f91aa640427ff6a373c98c033","devMode":false,"language":"en","translations":{}},"result":[{"type":1,"identifier":{"id":"panekj.powershell","uuid":"dd85b719-47bb-46cc-9a22-679b22821033"},"manifest":{"name":"powershell","displayName":"PowerShell","version":"2021.10.0","preview":false,"publisher":"panekj","description":"Develop PowerShell modules, commands and scripts in Visual Studio Code!","engines":{"vscode":"^1.56.0"},"license":"SEE LICENSE IN LICENSE.txt","homepage":"https://github.com/PowerShell/panekj/blob/master/README.md","categories":["Debuggers","Programming Languages","Snippets","Linters"],"icon":"media/PowerShell_Icon.png","galleryBanner":{"color":"#ACD1EC","theme":"light"},"repository":{"type":"git","url":"https://github.com/panekj/vscode-powershell.git"},"activationEvents":["onDebugInitialConfigurations","onDebugResolve:PowerShell","onLanguage:powershell","onCommand:PowerShell.NewProjectFromTemplate","onCommand:PowerShell.OpenExamplesFolder","onCommand:PowerShell.PickPSHostProcess","onCommand:PowerShell.PickRunspace","onCommand:PowerShell.SpecifyScriptArgs","onCommand:PowerShell.ShowSessionConsole","onCommand:PowerShell.ShowSessionMenu","onCommand:PowerShell.RestartSession","onCommand:PowerShell.EnableISEMode","onCommand:PowerShell.DisableISEMode","onView:PowerShellCommands"],"dependencies":{"node-fetch":"~2.6.5","semver":"~7.3.5","uuid":"~8.3.2","vscode-languageclient":"~7.0.0","vscode-languageserver-protocol":"~3.16.0"},"devDependencies":{"@types/glob":"~7.1.4","@types/mocha":"~9.0.0","@types/mock-fs":"~4.13.1","@types/node":"~14.17.4","@types/node-fetch":"~2.5.12","@types/rewire":"~2.5.28","@types/semver":"~7.3.8","@types/sinon":"~10.0.4","@types/uuid":"~8.3.1","@types/vscode":"~1.56.0","@vscode/test-electron":"~1.6.2","esbuild":"^0.13.4","mocha":"~9.1.2","mocha-multi-reporters":"~1.5.1","mock-fs":"~5.1.1","rewire":"~5.0.0","sinon":"~11.1.2","tslint":"~6.1.3","typescript":"~4.4.3","vsce":"~1.100.1"},"extensionDependencies":["vscode.powershell"],"main":"./out/main.js","scripts":{"lint":"tslint --project tsconfig.json","build":"tsc --project tsconfig.json && esbuild ./src/main.ts --outdir=out --sourcemap --bundle --minify --external:vscode --platform=node","test":"node ./out/test/runTests.js","package":"vsce package --no-gitHubIssueLinking","publish":"vsce publish"},"contributes":{"breakpoints":[{"language":"powershell"}],"viewsContainers":{"activitybar":[{"id":"PowerShellCommandExplorer","title":"(Preview) PowerShell Command Explorer","icon":"media/pwsh.svg"}]},"views":{"PowerShellCommandExplorer":[{"id":"PowerShellCommands","name":"PowerShell Commands","when":"config.powershell.sideBar.CommandExplorerVisibility"}]},"keybindings":[{"command":"PowerShell.ShowHelp","key":"ctrl+f1","when":"editorTextFocus && editorLangId == 'powershell'"},{"command":"PowerShell.ExpandAlias","key":"shift+alt+e","when":"editorTextFocus && editorLangId == 'powershell'"},{"command":"PowerShell.ShowAdditionalCommands","key":"shift+alt+s","when":"editorTextFocus && editorLangId == 'powershell'"},{"command":"PowerShell.RunSelection","key":"f8","when":"editorTextFocus && editorLangId == 'powershell'"},{"command":"editor.action.insertSnippet","when":"editorTextFocus && editorLangId == 'powershell'","mac":"cmd+alt+j","win":"ctrl+alt+j","linux":"ctrl+alt+j"}],"commands":[{"command":"PowerShell.ExpandAlias","title":"Expand Alias","category":"PowerShell"},{"command":"PowerShell.EnableISEMode","title":"Enable ISE Mode","category":"PowerShell"},{"command":"PowerShell.DisableISEMode","title":"Disable ISE Mode (restore to defaults)","category":"PowerShell"},{"command":"PowerShell.RefreshCommandsExplorer","title":"Refresh Command Explorer","icon":{"light":"media/resources/light/sync.svg","dark":"media/resources/dark/sync.svg"},"category":"PowerShell"},{"command":"PowerShell.InsertCommand","title":"Insert Command","icon":{"light":"media/resources/light/pencil.svg","dark":"media/resources/dark/pencil.svg"},"category":"PowerShell"},{"command":"PowerShell.OnlineHelp","title":"Get Online Help for Command (Deprecated)","category":"PowerShell"},{"command":"PowerShell.ShowHelp","title":"Get Help for Command","icon":{"light":"media/resources/light/question.svg","dark":"media/resources/dark/question.svg"},"category":"PowerShell"},{"command":"PowerShell.Debug.Start","title":"Run","category":"PowerShell","icon":{"light":"media/resources/light/run.svg","dark":"media/resources/dark/run.svg"}},{"command":"PowerShell.RunSelection","title":"Run Selection","category":"PowerShell","icon":{"light":"media/resources/light/play.svg","dark":"media/resources/dark/play.svg"}},{"command":"PowerShell.RestartSession","title":"Restart Current Session","category":"PowerShell"},{"command":"PowerShell.ShowLogs","title":"Show PowerShell Extension Logs","category":"PowerShell"},{"command":"PowerShell.OpenLogFolder","title":"Open PowerShell Extension Logs Folder","category":"PowerShell"},{"command":"PowerShell.GenerateBugReport","title":"Upload Bug Report to Github","category":"PowerShell"},{"command":"PowerShell.OpenInISE","title":"Open Current File in PowerShell ISE","category":"PowerShell"},{"command":"PowerShell.PowerShellFindModule","title":"Find/Install PowerShell Modules from the Gallery","category":"PowerShell"},{"command":"PowerShell.ShowAdditionalCommands","title":"Show Additional Commands from PowerShell Modules","category":"PowerShell"},{"command":"PowerShell.ShowSessionMenu","title":"Show Session Menu","category":"PowerShell"},{"command":"PowerShell.ShowSessionConsole","title":"Show Integrated Console","category":"PowerShell"},{"command":"PowerShell.NewProjectFromTemplate","title":"Create New Project from Plaster Template","category":"PowerShell"},{"command":"PowerShell.RunPesterTestsFromFile","title":"Run Pester tests","category":"PowerShell"},{"command":"PowerShell.DebugPesterTestsFromFile","title":"Debug Pester tests","category":"PowerShell"},{"command":"PowerShell.OpenExamplesFolder","title":"Open Examples Folder","category":"PowerShell"},{"command":"PowerShell.InvokeRegisteredEditorCommand","title":"Invoke Registered Editor Command","category":"PowerShell"},{"command":"PowerShell.ClosePanel","title":"Close panel","category":"PowerShell","icon":{"light":"media/resources/light/ClosePanel.svg","dark":"media/resources/dark/ClosePanel.svg"}},{"command":"PowerShell.PositionPanelLeft","title":"Move panel left","category":"PowerShell","icon":{"light":"media/resources/light/MovePanelLeft.svg","dark":"media/resources/dark/MovePanelLeft.svg"}},{"command":"PowerShell.PositionPanelBottom","title":"Move panel to bottom","category":"PowerShell","icon":{"light":"media/resources/light/MovePanelBottom.svg","dark":"media/resources/dark/MovePanelBottom.svg"}}],"menus":{"commandPalette":[{"command":"PowerShell.InsertCommand","when":"false"},{"command":"PowerShell.RefreshCommandsExplorer","when":"config.powershell.sideBar.CommandExplorerVisibility"},{"command":"PowerShell.InvokeRegisteredEditorCommand","when":"false"}],"explorer/context":[{"command":"PowerShell.RunPesterTestsFromFile","when":"resourceFilename =~ /\\.tests\\.ps1$/i"},{"command":"PowerShell.DebugPesterTestsFromFile","when":"resourceFilename =~ /\\.tests\\.ps1$/i"}],"editor/context":[{"when":"editorLangId == powershell","command":"PowerShell.RunSelection","group":"2_powershell"},{"when":"editorLangId == powershell","command":"PowerShell.ShowHelp","group":"2_powershell"}],"editor/title":[{"when":"editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons","command":"PowerShell.PositionPanelBottom","group":"navigation@97"},{"when":"editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons","command":"PowerShell.PositionPanelLeft","group":"navigation@98"},{"when":"editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons","command":"PowerShell.ClosePanel","group":"navigation@99"},{"when":"editorLangId == powershell && config.powershell.buttons.showRunButtons","command":"PowerShell.Debug.Start","group":"navigation@100"},{"when":"editorLangId == powershell && config.powershell.buttons.showRunButtons","command":"PowerShell.RunSelection","group":"navigation@101"}],"editor/title/context":[{"when":"resourceFilename =~ /\\.tests\\.ps1$/i","command":"PowerShell.RunPesterTestsFromFile"},{"when":"resourceFilename =~ /\\.tests\\.ps1$/i","command":"PowerShell.DebugPesterTestsFromFile"}],"view/title":[{"command":"PowerShell.RefreshCommandsExplorer","when":"view == PowerShellCommands","group":"navigation"}],"view/item/context":[{"command":"PowerShell.ShowHelp","when":"view == PowerShellCommands","group":"inline@1"},{"command":"PowerShell.InsertCommand","when":"view == PowerShellCommands","group":"inline@2"}]},"problemMatchers":[{"name":"pester","owner":"powershell","fileLocation":["absolute"],"severity":"error","pattern":[{"regexp":"^\\s*(?:\\[-\\]\\s+)(.*?)(?:\\s+\\d+\\.?\\d*\\s*m?s)(?:\\s+\\(\\d+\\.?\\d*m?s\\|\\d+\\.?\\d*m?s\\))?\\s*$","message":1},{"regexp":"^\\s+[Aa]t\\s+([^,]+,)?(.+?):(\\s+line\\s+)?(\\d+)(\\s+char:\\d+)?$","file":2,"line":4}]}],"snippets":[{"language":"powershell","path":"./snippets/PowerShell.json"}],"debuggers":[{"type":"PowerShell","label":"PowerShell","variables":{"PickPSHostProcess":"PowerShell.PickPSHostProcess","PickRunspace":"PowerShell.PickRunspace","SpecifyScriptArgs":"PowerShell.SpecifyScriptArgs"},"languages":["powershell"],"configurationSnippets":[{"label":"PowerShell: Launch Current File","description":"Launch and debug the file in the currently active editor window","body":{"name":"PowerShell Launch Current File","type":"PowerShell","request":"launch","script":"^\"\\${file}\"","cwd":"^\"\\${workspaceFolder}\""}},{"label":"PowerShell: Launch Script","description":"Launch and debug the specified file or command","body":{"name":"PowerShell Launch Script","type":"PowerShell","request":"launch","script":"^\"enter path or command to execute e.g.: \\${workspaceFolder}/src/foo.ps1 or Invoke-Pester\"","cwd":"^\"\\${workspaceFolder}\""}},{"label":"PowerShell: Interactive Session","description":"Debug commands executed from the Integrated Console","body":{"name":"PowerShell Interactive Session","type":"PowerShell","request":"launch","cwd":""}},{"label":"PowerShell: Attach to PowerShell Host Process","description":"Attach the debugger to a running PowerShell Host Process","body":{"name":"PowerShell Attach to Host Process","type":"PowerShell","request":"attach","runspaceId":1}},{"label":"PowerShell: Attach Interactive Session Runspace","description":"Open runspace picker to select runspace to attach debugger to","body":{"name":"PowerShell Attach Interactive Session Runspace","type":"PowerShell","request":"attach","processId":"current"}}],"configurationAttributes":{"launch":{"properties":{"script":{"type":"string","description":"Optional: Absolute path to the PowerShell script to launch under the debugger."},"args":{"type":"array","description":"Command line arguments to pass to the PowerShell script. Specify \"${command:SpecifyScriptArgs}\" if you want to be prompted for the args.","items":{"type":"string"},"default":[]},"cwd":{"type":"string","description":"Absolute path to the working directory. Default is the current workspace folder.","default":"${workspaceFolder}"},"createTemporaryIntegratedConsole":{"type":"boolean","description":"Determines whether a temporary PowerShell Integrated Console is created for each debugging session, useful for debugging PowerShell classes and binary modules.  Overrides the user setting 'powershell.debugging.createTemporaryIntegratedConsole'.","default":false}}},"attach":{"properties":{"computerName":{"type":"string","description":"Optional: The computer name to which a remote session will be established.  Works only on PowerShell 4 and above."},"processId":{"type":"string","description":"The process id of the PowerShell host process to attach to.  Works only on PowerShell 5 and above.","default":null},"runspaceId":{"type":["string","number"],"description":"Optional: The ID of the runspace to debug in the attached process.  Defaults to 1.  Works only on PowerShell 5 and above.","default":null},"runspaceName":{"type":"string","description":"Optional: The Name of the runspace to debug in the attached process.  Works only on PowerShell 5 and above.","default":null},"customPipeName":{"type":"string","description":"The custom pipe name of the PowerShell host process to attach to.  Works only on PowerShell 6.2 and above.","default":null}}}},"initialConfigurations":[]}],"configuration":{"type":"object","title":"PowerShell Configuration","properties":{"powershell.sideBar.CommandExplorerVisibility":{"type":"boolean","default":true,"description":"Specifies the visibility of the Command Explorer in the PowerShell Side Bar."},"powershell.sideBar.CommandExplorerExcludeFilter":{"type":"array","default":[],"description":"Specify array of Modules to exclude from Command Explorer listing."},"powershell.powerShellAdditionalExePaths":{"type":"array","description":"Specifies an array of versionName / exePath pairs where exePath points to a non-standard install location for PowerShell and versionName can be used to reference this path with the powershell.powerShellDefaultVersion setting.","scope":"machine","uniqueItems":true,"items":{"type":"object","required":["versionName","exePath"],"properties":{"versionName":{"type":"string","description":"Specifies the version name of this PowerShell executable. The version name can be referenced via the powershell.powerShellDefaultVersion setting."},"exePath":{"type":"string","description":"Specifies the path to the PowerShell executable. Typically this is a path to a non-standard install location."}}}},"powershell.powerShellDefaultVersion":{"type":"string","description":"Specifies the PowerShell version name, as displayed by the 'PowerShell: Show Session Menu' command, used when the extension loads e.g \"Windows PowerShell (x86)\" or \"PowerShell Core 6 (x64)\". You can specify additional PowerShell executables by using the \"powershell.powerShellAdditionalExePaths\" setting."},"powershell.powerShellExePath":{"type":"string","default":"","scope":"machine","description":"REMOVED. Please use the \"powershell.powerShellDefaultVersion\" setting instead."},"powershell.promptToUpdatePowerShell":{"type":"boolean","description":"Specifies whether you should be prompted to update your version of PowerShell.","default":true},"powershell.promptToUpdatePackageManagement":{"type":"boolean","description":"Specifies whether you should be prompted to update your version of PackageManagement if it's under 1.4.6.","default":true},"powershell.startAsLoginShell.osx":{"type":"boolean","default":true,"description":"Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable."},"powershell.startAsLoginShell.linux":{"type":"boolean","default":false,"description":"Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable."},"powershell.startAutomatically":{"type":"boolean","default":true,"description":"Starts PowerShell extension features automatically when a PowerShell file opens. If false, to start the extension, use the 'PowerShell: Restart Current Session' command. IntelliSense, code navigation, integrated console, code formatting, and other features are not enabled until the extension starts."},"powershell.useX86Host":{"type":"boolean","default":false,"description":"Uses the 32-bit language service on 64-bit Windows. This setting has no effect on 32-bit Windows or on the PowerShell extension debugger, which has its own architecture configuration."},"powershell.enableProfileLoading":{"type":"boolean","default":true,"description":"Loads user and system-wide PowerShell profiles (profile.ps1 and Microsoft.VSCode_profile.ps1) into the PowerShell session. This affects IntelliSense and interactive script execution, but it does not affect the debugger."},"powershell.bugReporting.project":{"type":"string","default":"https://github.com/panekj/vscode-powershell","description":"Specifies the url of the GitHub project in which to generate bug reports."},"powershell.helpCompletion":{"type":"string","enum":["Disabled","BlockComment","LineComment"],"default":"BlockComment","description":"Controls the comment-based help completion behavior triggered by typing '##'. Set the generated help style with 'BlockComment' or 'LineComment'. Disable the feature with 'Disabled'."},"powershell.cwd":{"type":"string","default":null,"description":"An explicit start path where the Powershell Integrated Console will be launched. Both the PowerShell process and the shell's location will be set to this directory. Predefined variables can be used (i.e. ${fileDirname} to use the current opened file's directory)."},"powershell.scriptAnalysis.enable":{"type":"boolean","default":true,"description":"Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer."},"powershell.scriptAnalysis.settingsPath":{"type":"string","default":"PSScriptAnalyzerSettings.psd1","description":"Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace."},"powershell.codeFolding.enable":{"type":"boolean","default":true,"description":"Enables syntax based code folding. When disabled, the default indentation based code folding is used."},"powershell.codeFolding.showLastLine":{"type":"boolean","default":true,"description":"Shows the last line of a folded section similar to the default VSCode folding style. When disabled, the entire folded region is hidden."},"powershell.codeFormatting.autoCorrectAliases":{"type":"boolean","default":false,"description":"Replaces aliases with their aliased name."},"powershell.codeFormatting.preset":{"type":"string","enum":["Custom","Allman","OTBS","Stroustrup"],"default":"Custom","description":"Sets the codeformatting options to follow the given indent style in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81."},"powershell.codeFormatting.openBraceOnSameLine":{"type":"boolean","default":true,"description":"Places open brace on the same line as its associated statement."},"powershell.codeFormatting.newLineAfterOpenBrace":{"type":"boolean","default":true,"description":"Adds a newline (line break) after an open brace."},"powershell.codeFormatting.newLineAfterCloseBrace":{"type":"boolean","default":true,"description":"Adds a newline (line break) after a closing brace."},"powershell.codeFormatting.pipelineIndentationStyle":{"type":"string","enum":["IncreaseIndentationForFirstPipeline","IncreaseIndentationAfterEveryPipeline","NoIndentation","None"],"default":"NoIndentation","description":"Multi-line pipeline style settings (default: NoIndentation)."},"powershell.codeFormatting.whitespaceBeforeOpenBrace":{"type":"boolean","default":true,"description":"Adds a space between a keyword and its associated scriptblock expression."},"powershell.codeFormatting.whitespaceBeforeOpenParen":{"type":"boolean","default":true,"description":"Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression."},"powershell.codeFormatting.whitespaceAroundOperator":{"type":"boolean","default":true,"description":"Adds spaces before and after an operator ('=', '+', '-', etc.)."},"powershell.codeFormatting.whitespaceAfterSeparator":{"type":"boolean","default":true,"description":"Adds a space after a separator (',' and ';')."},"powershell.codeFormatting.whitespaceInsideBrace":{"type":"boolean","default":true,"description":"Adds a space after an opening brace ('{') and before a closing brace ('}')."},"powershell.codeFormatting.whitespaceBetweenParameters":{"type":"boolean","default":false,"description":"Removes redundant whitespace between parameters."},"powershell.codeFormatting.whitespaceAroundPipe":{"type":"boolean","default":true,"description":"REMOVED. Please use the \"powershell.codeFormatting.addWhitespaceAroundPipe\" setting instead. If you've used this setting before, we have moved it for you automatically."},"powershell.codeFormatting.addWhitespaceAroundPipe":{"type":"boolean","default":true,"description":"Adds a space before and after the pipeline operator ('|') if it is missing."},"powershell.codeFormatting.trimWhitespaceAroundPipe":{"type":"boolean","default":false,"description":"Trims extraneous whitespace (more than 1 character) before and after the pipeline operator ('|')."},"powershell.codeFormatting.ignoreOneLineBlock":{"type":"boolean","default":true,"description":"Does not reformat one-line code blocks, such as \"if (...) {...} else {...}\"."},"powershell.codeFormatting.alignPropertyValuePairs":{"type":"boolean","default":true,"description":"Align assignment statements in a hashtable or a DSC Configuration."},"powershell.codeFormatting.useConstantStrings":{"type":"boolean","default":false,"description":"Use single quotes if a string is not interpolated and its value does not contain a single quote."},"powershell.codeFormatting.useCorrectCasing":{"type":"boolean","default":false,"description":"Use correct casing for cmdlets."},"powershell.integratedConsole.showOnStartup":{"type":"boolean","default":true,"description":"Shows the integrated console when the PowerShell extension is initialized."},"powershell.integratedConsole.focusConsoleOnExecute":{"type":"boolean","default":true,"description":"Switches focus to the console when a script selection is run or a script file is debugged. This is an accessibility feature. To disable it, set to false."},"powershell.integratedConsole.useLegacyReadLine":{"type":"boolean","default":false,"description":"Falls back to the legacy (lightweight) ReadLine experience. This will disable the use of PSReadLine in the PowerShell Integrated Console."},"powershell.integratedConsole.forceClearScrollbackBuffer":{"type":"boolean","description":"Use the vscode API to clear the terminal since that's the only reliable way to clear the scrollback buffer. Turn this on if you're use to 'Clear-Host' clearing scroll history as wellclear-terminal-via-lsp."},"powershell.integratedConsole.suppressStartupBanner":{"type":"boolean","default":false,"description":"Do not show the Powershell Integrated Console banner on launch"},"powershell.debugging.createTemporaryIntegratedConsole":{"type":"boolean","default":false,"description":"Determines whether a temporary PowerShell Integrated Console is created for each debugging session, useful for debugging PowerShell classes and binary modules."},"powershell.developer.bundledModulesPath":{"type":"string","description":"Specifies an alternate path to the folder containing modules that are bundled with the PowerShell extension (i.e. PowerShell Editor Services, PSScriptAnalyzer, Plaster)"},"powershell.developer.editorServicesLogLevel":{"type":"string","enum":["Diagnostic","Verbose","Normal","Warning","Error"],"default":"Normal","description":"Sets the logging verbosity level for the PowerShell Editor Services host executable.  Valid values are 'Diagnostic', 'Verbose', 'Normal', 'Warning', and 'Error'"},"powershell.developer.editorServicesWaitForDebugger":{"type":"boolean","default":false,"description":"Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding."},"powershell.developer.featureFlags":{"type":"array","default":null,"description":"An array of strings that enable experimental features in the PowerShell extension."},"powershell.developer.waitForSessionFileTimeoutSeconds":{"type":"number","default":240,"description":"When the PowerShell extension is starting up, it checks for a session file in order to connect to the language server. This setting determines how long until checking for the session file times out. (default is 240 seconds or 4 minutes)"},"powershell.pester.useLegacyCodeLens":{"type":"boolean","default":true,"description":"Use code lens that is compatible with Pester 4. Disabling this will show 'Run Tests' on all It, Describe and Context blocks, and will correctly work only with Pester 5 and newer."},"powershell.pester.outputVerbosity":{"type":"string","enum":["FromPreference","None","Minimal","Normal","Detailed","Diagnostic"],"default":"FromPreference","description":"Defines the verbosity of output to be used. For Pester 5 and newer the default value FromPreference, will use the Output settings from the $PesterPreference defined in the caller context, and will default to Normal if there is none. For Pester 4 the FromPreference and Normal options map to All, and Minimal option maps to Fails."},"powershell.pester.debugOutputVerbosity":{"type":"string","enum":["None","Minimal","Normal","Detailed","Diagnostic"],"default":"Diagnostic","description":"Defines the verbosity of output to be used when debugging a test or a block. For Pester 5 and newer the default value Diagnostic will print additional information about discovery, skipped and filtered tests, mocking and more."},"powershell.buttons.showRunButtons":{"type":"boolean","default":true,"description":"Show the Run and Run Selection buttons in the editor titlebar."},"powershell.buttons.showPanelMovementButtons":{"type":"boolean","default":false,"description":"Show buttons in the editor titlebar for moving the panel around."}}},"capabilities":{"untrustedWorkspaces":{"supported":false}},"configurationDefaults":{"[powershell]":{"debug.saveBeforeStart":"nonUntitledEditorsInActiveGroup","editor.semanticHighlighting.enabled":false,"editor.wordSeparators":"`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?"}},"themes":[{"label":"PowerShell ISE","uiTheme":"vs","path":"./themes/theme-psise/theme.json"}]},"private":true},"location":{"$mid":1,"path":"/home/soflyy_cash/.codeoss/extensions/panekj.powershell-2021.10.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"panekj","metadata":{"installedTimestamp":1743210974792,"pinned":false,"source":"gallery","id":"dd85b719-47bb-46cc-9a22-679b22821033","publisherId":"1083f2b7-2200-4c1e-b33a-4e8cfedda160","publisherDisplayName":"panekj","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"fabioz.vscode-pydev-python-debugger","uuid":"bca40694-3c64-47da-a1e0-32a9cfcda8a6"},"manifest":{"name":"vscode-pydev-python-debugger","displayName":"Python Debugger (PyDev)","description":"Python Debugger with the PyDev Debugger (pydevd)","version":"0.1.0","publisher":"fabioz","icon":"icon.png","license":"http://www.pydev.org/vscode/license.html","homepage":"http://www.pydev.org/vscode","repository":{"type":"git","url":"https://github.com/fabioz/vscode-pydev-info"},"engines":{"vscode":"^1.65.0"},"categories":["Debuggers"],"keywords":["multi-root ready","python","debug","debugging","debugger"],"activationEvents":["onLanguage:python","onDebugInitialConfigurations","onDebugResolve:pydevd","onDebugDynamicConfigurations:pydevd","onCommand:pydevd.enter.license","onCommand:pydevd.validate.license","onCommand:pydevd.getRunfilesPy","onCommand:pydevd.launchLastPyDevLaunch","onCommand:pydevd.debugLastPyDevLaunch"],"main":"./out/extension","contributes":{"commands":[{"command":"pydevd.enter.license","title":"Enter License","category":"pydevd"},{"command":"pydevd.validate.license","title":"Validate License","category":"pydevd"},{"command":"pydevd.getRunfilesPy","title":"Gets the runfiles.py in the debugger","category":"pydevd"},{"command":"pydevd.launchLastPyDevLaunch","title":"Re Launch last PyDev launch","category":"pydevd"},{"command":"pydevd.debugLastPyDevLaunch","title":"Re Debug last PyDev launch","category":"pydevd"}],"keybindings":[],"configuration":{"type":"object","title":"PyDev Debugger Configuration","properties":{"python.pydev.debugger.pydevdPyFile":{"type":"string","default":"","description":"If specified, must point to the the pydevd.py which should be used to start the debugger (instead of the one directly contributed by the extension)."},"python.pydev.debugger.pydevdCacheDirectory":{"type":"string","default":"","description":"The directory where vscode-python-pydevd will use as a cache (usually it'll pip-install pydevd for the required Python version to have accelerators here). If not specified, it'll use a directory inside of the extension."},"python.pydev.debugger.pydevdPipInstall":{"type":"string","default":"install","description":"Whether to pip-install pydevd using pip in the cache directory to take advantage of accelerators.","enum":["install","no-install"]}}},"debuggers":[{"type":"pydevd","label":"PyDev Debugger (Python)","languages":["python"],"configurationAttributes":{"launch":{"properties":{"args":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"The command line arguments passed to the program."},"cwd":{"type":"string","description":"The working directory of the program.","default":"${workspaceFolder}"},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code debug console (input stream not supported).","VS Code integrated terminal.","External terminal that can be configured in user settings."],"description":"The specified console to launch the program.","default":"integratedTerminal"},"env":{"additionalProperties":{"type":"string"},"default":{},"description":"Environment variables (used to launch python as well as the debug adapter).","type":"object"},"pythonExecutable":{"type":"string","description":"The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."},"pydevdPyDebuggerFile":{"type":"string","description":"The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."},"variablePresentation":{"type":"object","description":"The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).","properties":{"special":{"type":"string","description":"The special variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide special variables.","Create a group for special variables and show variables in the group.","Inline special variables."]},"function":{"type":"string","description":"The function variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide function variables.","Create a group for function variables and show variables in the group.","Inline function variables."]},"class":{"type":"string","description":"The class variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide class variables.","Create a group for class variables and show variables in the group.","Inline class variables."]},"protected":{"type":"string","description":"The protected variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide protected variables.","Create a group for protected variables and show variables in the group.","Inline protected variables."]}}},"stopAllThreadsOnSuspend":{"type":"boolean","description":"Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).","default":false},"steppingResumesAllThreads":{"type":"boolean","description":"Whether to resume all threads when stepping.","default":false},"justMyCode":{"type":"boolean","description":"Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).","default":false},"redirectOutput":{"type":"boolean","description":"Whether to redirect the output of the program to the debug console.","default":false},"showReturnValue":{"type":"boolean","description":"Whether to show the return value of a function when stepping.","default":false},"breakOnSystemExitZero":{"type":"boolean","description":"When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.","default":false},"django":{"type":"boolean","description":"Whether to enable Django templates debugging.","default":false},"jinja":{"type":"boolean","description":"Whether to enable Jinja templates debugging.","default":false},"stopOnEntry":{"type":"boolean","description":"Whether to stop on entry.","default":false},"maxExceptionStackFrames":{"type":"number","description":"The maximum number of frames to show in the exception stack trace (0 means unlimited).","default":0},"guiEventLoop":{"type":"string","description":"The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').","default":"matplotlib"},"resolveSymlinks":{"type":"boolean","description":"Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).","default":false},"pathMappings":{"type":"array","description":"A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).","items":{"type":"object","properties":{"localRoot":{"type":"string"},"remoteRoot":{"type":"string"}}}},"autoReload":{"type":"object","description":"Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.","properties":{"enable":{"type":"boolean","default":false,"description":"Whether to enable auto reload."},"watchDirectories":{"type":"array","items":{"type":"string"},"default":[],"description":"The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."},"pollingInterval":{"type":"number","default":1,"description":"The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."},"exclude":{"type":"array","items":{"type":"string"},"default":["**/.git/**","**/__pycache__/**","**/node_modules/**","**/.metadata/**","**/site-packages/**"],"description":"The patterns to exclude from the watch directories."},"include":{"type":"array","items":{"type":"string"},"default":["**/*.py","**/*.pyw"],"description":"The patterns to include in the watch directories."}}},"rules":{"type":"array","description":"The exclusion/inclusion rules to be used by the debugger.","items":{"type":"object"},"properties":{"include":{"type":"boolean"},"path":{"type":"string","description":"The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."},"module":{"type":"string","description":"The module name to be included/excluded (example: `my.module.name`)."}}},"program":{"type":"string","description":"The .py file that should be debugged."},"module":{"type":"string","description":"The module entry point to be run."}},"oneOf":[{"required":["program"]},{"required":["module"]}]},"attach":{"required":["port","mode"],"properties":{"host":{"default":"127.0.0.1","description":"Hostname or IP address to connect to.","type":"string"},"port":{"description":"Port which pydevd should connect to (in server mode) or the port to connect to (in client mode).","type":["number","string"],"default":"5678"},"mode":{"type":"string","enum":["client","server"],"enumDescriptions":["Connects to a pydevd session which is waiting for the connection.","Creates a server which waits for incoming connections from pydevd."],"description":"The attach mode, which decides whether the client will connect to the server or vice-versa.","default":"server"},"env":{"additionalProperties":{"type":"string"},"default":{},"description":"Environment variables (used to launch python as well as the debug adapter).","type":"object"},"pythonExecutable":{"type":"string","description":"The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."},"pydevdPyDebuggerFile":{"type":"string","description":"The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."},"variablePresentation":{"type":"object","description":"The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).","properties":{"special":{"type":"string","description":"The special variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide special variables.","Create a group for special variables and show variables in the group.","Inline special variables."]},"function":{"type":"string","description":"The function variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide function variables.","Create a group for function variables and show variables in the group.","Inline function variables."]},"class":{"type":"string","description":"The class variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide class variables.","Create a group for class variables and show variables in the group.","Inline class variables."]},"protected":{"type":"string","description":"The protected variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide protected variables.","Create a group for protected variables and show variables in the group.","Inline protected variables."]}}},"stopAllThreadsOnSuspend":{"type":"boolean","description":"Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).","default":false},"steppingResumesAllThreads":{"type":"boolean","description":"Whether to resume all threads when stepping.","default":false},"justMyCode":{"type":"boolean","description":"Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).","default":false},"redirectOutput":{"type":"boolean","description":"Whether to redirect the output of the program to the debug console.","default":false},"showReturnValue":{"type":"boolean","description":"Whether to show the return value of a function when stepping.","default":false},"breakOnSystemExitZero":{"type":"boolean","description":"When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.","default":false},"django":{"type":"boolean","description":"Whether to enable Django templates debugging.","default":false},"jinja":{"type":"boolean","description":"Whether to enable Jinja templates debugging.","default":false},"stopOnEntry":{"type":"boolean","description":"Whether to stop on entry.","default":false},"maxExceptionStackFrames":{"type":"number","description":"The maximum number of frames to show in the exception stack trace (0 means unlimited).","default":0},"guiEventLoop":{"type":"string","description":"The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').","default":"matplotlib"},"resolveSymlinks":{"type":"boolean","description":"Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).","default":false},"pathMappings":{"type":"array","description":"A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).","items":{"type":"object","properties":{"localRoot":{"type":"string"},"remoteRoot":{"type":"string"}}}},"autoReload":{"type":"object","description":"Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.","properties":{"enable":{"type":"boolean","default":false,"description":"Whether to enable auto reload."},"watchDirectories":{"type":"array","items":{"type":"string"},"default":[],"description":"The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."},"pollingInterval":{"type":"number","default":1,"description":"The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."},"exclude":{"type":"array","items":{"type":"string"},"default":["**/.git/**","**/__pycache__/**","**/node_modules/**","**/.metadata/**","**/site-packages/**"],"description":"The patterns to exclude from the watch directories."},"include":{"type":"array","items":{"type":"string"},"default":["**/*.py","**/*.pyw"],"description":"The patterns to include in the watch directories."}}},"rules":{"type":"array","description":"The exclusion/inclusion rules to be used by the debugger.","items":{"type":"object"},"properties":{"include":{"type":"boolean"},"path":{"type":"string","description":"The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."},"module":{"type":"string","description":"The module name to be included/excluded (example: `my.module.name`)."}}}}},"test-template":{"properties":{"args":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"The command line arguments passed to the program."},"cwd":{"type":"string","description":"The working directory of the program.","default":"${workspaceFolder}"},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code debug console (input stream not supported).","VS Code integrated terminal.","External terminal that can be configured in user settings."],"description":"The specified console to launch the program.","default":"integratedTerminal"},"env":{"additionalProperties":{"type":"string"},"default":{},"description":"Environment variables (used to launch python as well as the debug adapter).","type":"object"},"pythonExecutable":{"type":"string","description":"The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."},"pydevdPyDebuggerFile":{"type":"string","description":"The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."},"variablePresentation":{"type":"object","description":"The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).","properties":{"special":{"type":"string","description":"The special variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide special variables.","Create a group for special variables and show variables in the group.","Inline special variables."]},"function":{"type":"string","description":"The function variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide function variables.","Create a group for function variables and show variables in the group.","Inline function variables."]},"class":{"type":"string","description":"The class variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide class variables.","Create a group for class variables and show variables in the group.","Inline class variables."]},"protected":{"type":"string","description":"The protected variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide protected variables.","Create a group for protected variables and show variables in the group.","Inline protected variables."]}}},"stopAllThreadsOnSuspend":{"type":"boolean","description":"Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).","default":false},"steppingResumesAllThreads":{"type":"boolean","description":"Whether to resume all threads when stepping.","default":false},"justMyCode":{"type":"boolean","description":"Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).","default":false},"redirectOutput":{"type":"boolean","description":"Whether to redirect the output of the program to the debug console.","default":false},"showReturnValue":{"type":"boolean","description":"Whether to show the return value of a function when stepping.","default":false},"breakOnSystemExitZero":{"type":"boolean","description":"When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.","default":false},"django":{"type":"boolean","description":"Whether to enable Django templates debugging.","default":false},"jinja":{"type":"boolean","description":"Whether to enable Jinja templates debugging.","default":false},"stopOnEntry":{"type":"boolean","description":"Whether to stop on entry.","default":false},"maxExceptionStackFrames":{"type":"number","description":"The maximum number of frames to show in the exception stack trace (0 means unlimited).","default":0},"guiEventLoop":{"type":"string","description":"The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').","default":"matplotlib"},"resolveSymlinks":{"type":"boolean","description":"Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).","default":false},"pathMappings":{"type":"array","description":"A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).","items":{"type":"object","properties":{"localRoot":{"type":"string"},"remoteRoot":{"type":"string"}}}},"autoReload":{"type":"object","description":"Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.","properties":{"enable":{"type":"boolean","default":false,"description":"Whether to enable auto reload."},"watchDirectories":{"type":"array","items":{"type":"string"},"default":[],"description":"The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."},"pollingInterval":{"type":"number","default":1,"description":"The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."},"exclude":{"type":"array","items":{"type":"string"},"default":["**/.git/**","**/__pycache__/**","**/node_modules/**","**/.metadata/**","**/site-packages/**"],"description":"The patterns to exclude from the watch directories."},"include":{"type":"array","items":{"type":"string"},"default":["**/*.py","**/*.pyw"],"description":"The patterns to include in the watch directories."}}},"rules":{"type":"array","description":"The exclusion/inclusion rules to be used by the debugger.","items":{"type":"object"},"properties":{"include":{"type":"boolean"},"path":{"type":"string","description":"The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."},"module":{"type":"string","description":"The module name to be included/excluded (example: `my.module.name`)."}}}}},"run-file-template":{"properties":{"args":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"The command line arguments passed to the program."},"cwd":{"type":"string","description":"The working directory of the program.","default":"${workspaceFolder}"},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code debug console (input stream not supported).","VS Code integrated terminal.","External terminal that can be configured in user settings."],"description":"The specified console to launch the program.","default":"integratedTerminal"},"env":{"additionalProperties":{"type":"string"},"default":{},"description":"Environment variables (used to launch python as well as the debug adapter).","type":"object"},"pythonExecutable":{"type":"string","description":"The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."},"pydevdPyDebuggerFile":{"type":"string","description":"The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."},"variablePresentation":{"type":"object","description":"The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).","properties":{"special":{"type":"string","description":"The special variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide special variables.","Create a group for special variables and show variables in the group.","Inline special variables."]},"function":{"type":"string","description":"The function variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide function variables.","Create a group for function variables and show variables in the group.","Inline function variables."]},"class":{"type":"string","description":"The class variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide class variables.","Create a group for class variables and show variables in the group.","Inline class variables."]},"protected":{"type":"string","description":"The protected variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide protected variables.","Create a group for protected variables and show variables in the group.","Inline protected variables."]}}},"stopAllThreadsOnSuspend":{"type":"boolean","description":"Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).","default":false},"steppingResumesAllThreads":{"type":"boolean","description":"Whether to resume all threads when stepping.","default":false},"justMyCode":{"type":"boolean","description":"Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).","default":false},"redirectOutput":{"type":"boolean","description":"Whether to redirect the output of the program to the debug console.","default":false},"showReturnValue":{"type":"boolean","description":"Whether to show the return value of a function when stepping.","default":false},"breakOnSystemExitZero":{"type":"boolean","description":"When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.","default":false},"django":{"type":"boolean","description":"Whether to enable Django templates debugging.","default":false},"jinja":{"type":"boolean","description":"Whether to enable Jinja templates debugging.","default":false},"stopOnEntry":{"type":"boolean","description":"Whether to stop on entry.","default":false},"maxExceptionStackFrames":{"type":"number","description":"The maximum number of frames to show in the exception stack trace (0 means unlimited).","default":0},"guiEventLoop":{"type":"string","description":"The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').","default":"matplotlib"},"resolveSymlinks":{"type":"boolean","description":"Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).","default":false},"pathMappings":{"type":"array","description":"A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).","items":{"type":"object","properties":{"localRoot":{"type":"string"},"remoteRoot":{"type":"string"}}}},"autoReload":{"type":"object","description":"Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.","properties":{"enable":{"type":"boolean","default":false,"description":"Whether to enable auto reload."},"watchDirectories":{"type":"array","items":{"type":"string"},"default":[],"description":"The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."},"pollingInterval":{"type":"number","default":1,"description":"The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."},"exclude":{"type":"array","items":{"type":"string"},"default":["**/.git/**","**/__pycache__/**","**/node_modules/**","**/.metadata/**","**/site-packages/**"],"description":"The patterns to exclude from the watch directories."},"include":{"type":"array","items":{"type":"string"},"default":["**/*.py","**/*.pyw"],"description":"The patterns to include in the watch directories."}}},"rules":{"type":"array","description":"The exclusion/inclusion rules to be used by the debugger.","items":{"type":"object"},"properties":{"include":{"type":"boolean"},"path":{"type":"string","description":"The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."},"module":{"type":"string","description":"The module name to be included/excluded (example: `my.module.name`)."}}}}},"base-template":{"properties":{"args":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"The command line arguments passed to the program."},"cwd":{"type":"string","description":"The working directory of the program.","default":"${workspaceFolder}"},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code debug console (input stream not supported).","VS Code integrated terminal.","External terminal that can be configured in user settings."],"description":"The specified console to launch the program.","default":"integratedTerminal"},"env":{"additionalProperties":{"type":"string"},"default":{},"description":"Environment variables (used to launch python as well as the debug adapter).","type":"object"},"pythonExecutable":{"type":"string","description":"The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."},"pydevdPyDebuggerFile":{"type":"string","description":"The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."},"variablePresentation":{"type":"object","description":"The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).","properties":{"special":{"type":"string","description":"The special variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide special variables.","Create a group for special variables and show variables in the group.","Inline special variables."]},"function":{"type":"string","description":"The function variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide function variables.","Create a group for function variables and show variables in the group.","Inline function variables."]},"class":{"type":"string","description":"The class variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide class variables.","Create a group for class variables and show variables in the group.","Inline class variables."]},"protected":{"type":"string","description":"The protected variable presentation settings.","enum":["hide","group","inline"],"enumDescriptions":["Hide protected variables.","Create a group for protected variables and show variables in the group.","Inline protected variables."]}}},"stopAllThreadsOnSuspend":{"type":"boolean","description":"Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).","default":false},"steppingResumesAllThreads":{"type":"boolean","description":"Whether to resume all threads when stepping.","default":false},"justMyCode":{"type":"boolean","description":"Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).","default":false},"redirectOutput":{"type":"boolean","description":"Whether to redirect the output of the program to the debug console.","default":false},"showReturnValue":{"type":"boolean","description":"Whether to show the return value of a function when stepping.","default":false},"breakOnSystemExitZero":{"type":"boolean","description":"When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.","default":false},"django":{"type":"boolean","description":"Whether to enable Django templates debugging.","default":false},"jinja":{"type":"boolean","description":"Whether to enable Jinja templates debugging.","default":false},"stopOnEntry":{"type":"boolean","description":"Whether to stop on entry.","default":false},"maxExceptionStackFrames":{"type":"number","description":"The maximum number of frames to show in the exception stack trace (0 means unlimited).","default":0},"guiEventLoop":{"type":"string","description":"The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').","default":"matplotlib"},"resolveSymlinks":{"type":"boolean","description":"Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).","default":false},"pathMappings":{"type":"array","description":"A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).","items":{"type":"object","properties":{"localRoot":{"type":"string"},"remoteRoot":{"type":"string"}}}},"autoReload":{"type":"object","description":"Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.","properties":{"enable":{"type":"boolean","default":false,"description":"Whether to enable auto reload."},"watchDirectories":{"type":"array","items":{"type":"string"},"default":[],"description":"The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."},"pollingInterval":{"type":"number","default":1,"description":"The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."},"exclude":{"type":"array","items":{"type":"string"},"default":["**/.git/**","**/__pycache__/**","**/node_modules/**","**/.metadata/**","**/site-packages/**"],"description":"The patterns to exclude from the watch directories."},"include":{"type":"array","items":{"type":"string"},"default":["**/*.py","**/*.pyw"],"description":"The patterns to include in the watch directories."}}},"rules":{"type":"array","description":"The exclusion/inclusion rules to be used by the debugger.","items":{"type":"object"},"properties":{"include":{"type":"boolean"},"path":{"type":"string","description":"The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."},"module":{"type":"string","description":"The module name to be included/excluded (example: `my.module.name`)."}}}}}},"configurationSnippets":[{"label":"PyDev: Launch Python Program","description":"Add a new configuration which will launch a python program with the PyDev debugger.","body":{"type":"pydevd","name":"PyDev Debug (Launch)","request":"launch","cwd":"^\"\\${workspaceFolder}\"","console":"integratedTerminal","program":"^\"\\${file}\"","args":""}},{"label":"PyDev: Wait for Python Program Attach","description":"Add a new configuration which will start a server and wait for Python to attach to the given port.","body":{"type":"pydevd","name":"PyDev Debug (Wait For Attach)","request":"attach","cwd":"^\"\\${workspaceFolder}\"","port":"5678","mode":"server"}},{"label":"PyDev: Attach to Python Program","description":"Add a new configuration which will attach to a Python program (which must be already waiting for the attach).","body":{"type":"pydevd","name":"PyDev Debug (Wait For Attach)","request":"attach","cwd":"^\"\\${workspaceFolder}\"","host":"localhost","port":"5678","mode":"client"}},{"label":"PyDev: Customize Test (Template)","description":"Add a new configuration which will serve as a template for tests (to customize pytest arguments or environment variables for instance).","body":{"type":"pydevd","name":"PyDev Test Template","request":"test-template","env":{},"args":[]}},{"label":"PyDev: Customize Run File (Template)","description":"Add a new configuration which will serve as a template for run file from command palette or code lenses (to customize arguments or environment variables for instance).","body":{"type":"pydevd","name":"PyDev Run File Template","request":"run-file-template","env":{},"args":[]}},{"label":"PyDev: Customize All Launch Configurations (Template)","description":"Add a new configuration which will serve as a template for all launch configurations (to customize the variable presentation or environment variables for instance).","body":{"type":"pydevd","name":"PyDev Base Template","request":"base-template","env":{},"args":[],"variablePresentation":{"special":"hide","function":"hide","class":"hide","protected":"inline"}}}]}],"menus":{"commandPalette":[{"command":"pydevd.getRunfilesPy","when":"false"}]},"breakpoints":[{"language":"python"},{"language":"html"},{"language":"djhtml"}]},"scripts":{"vscode:prepublish":"npm run -S esbuild-base -- --minify","esbuild-base":"rimraf out && esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node","build":"npm run -S esbuild-base -- --sourcemap","watch":"npm run -S esbuild-base -- --sourcemap --watch","fmt":"prettier --write \"src/**/*.ts\"&& npm run test -- --fix","test":"eslint src --ext ts && tsc --noEmit"},"prettier":{"tabWidth":4,"printWidth":120,"quoteProps":"preserve"},"devDependencies":{"@types/mocha":"^2.2.32","@types/node":"^16.0.00","@types/vscode":"1.65.0","typescript":"^4.9.4","@typescript-eslint/eslint-plugin":"^5.47.1","@typescript-eslint/parser":"^5.47.1","esbuild":"^0.16.11","eslint":"^8.30.0","eslint-plugin-header":"^3.1.1","prettier":"^2.8.1","rimraf":"^3.0.2"},"dependencies":{"vscode-languageclient":"^3.4.5","vscode-nls":"^4.1.2","tmp":"^0.0.31","path-exists":"^3.0.0","expand-home-dir":"^0.0.3","http-proxy-agent":"^2.1.0","https-proxy-agent":"^2.2.4","glob":"^7.1.1","big-integer":"1.6.52"}},"location":{"$mid":1,"path":"/home/soflyy_cash/.codeoss/extensions/fabioz.vscode-pydev-python-debugger-0.1.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"fabioz","metadata":{"installedTimestamp":1743211000875,"pinned":false,"source":"gallery","id":"bca40694-3c64-47da-a1e0-32a9cfcda8a6","publisherId":"ed312bf9-1a46-492d-a796-9b89fb8405cf","publisherDisplayName":"fabioz","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"rogalmic.bash-debug","uuid":"f4f0748b-9f86-461e-84f9-73bf2e1f91c2"},"manifest":{"name":"bash-debug","displayName":"Bash Debug","version":"0.3.9","publisher":"rogalmic","description":"A debugger extension for bash scripts (using bashdb).","author":{"name":"Michal Rogalinski","email":"rogalinsky@gmail.com"},"license":"MIT","keywords":["multi-root ready"],"engines":{"vscode":"^1.40.0","node":"^12.8.1"},"icon":"images/bash-debug-icon.png","categories":["Debuggers"],"private":true,"repository":{"type":"git","url":"https://github.com/rogalmic/vscode-bash-debug.git"},"bugs":{"url":"https://github.com/rogalmic/vscode-bash-debug/issues"},"badges":[{"url":"https://img.shields.io/github/downloads/rogalmic/vscode-bash-debug/latest/total.svg","href":"https://github.com/rogalmic/vscode-bash-debug/releases/latest","description":"Download latest beta release (master branch)"},{"url":"https://img.shields.io/github/stars/rogalmic/vscode-bash-debug.svg?style=social&label=Stars","href":"https://github.com/rogalmic/vscode-bash-debug/stargazers","description":"Star the project in github"},{"url":"https://img.shields.io/badge/paypal-donate-blue.svg","href":"https://paypal.me/rogalmic","description":"Donate some $ to keep project going"}],"dependencies":{"child-process":"^1.0.2","npm-which":"^3.0.1","shell-quote":"^1.7.2","vscode-debugadapter":"1.40.0","vscode-debugprotocol":"1.40.0"},"devDependencies":{"@types/mocha":"7.0.2","@types/node":"12.12.14","jsdoctest":"1.7.1","mocha":"7.1.2","standard-version":"^8.0.0","tslint":"6.1.2","typescript":"3.9.5","vsce":"1.77.0","vscode":"1.1.36","vscode-debugadapter-testsupport":"1.41.0"},"scripts":{"prepare":"tsc -p ./src","compile":"tsc -p ./src","tslint":"tslint ./src/**/*.ts","watch":"tsc -w -p ./src","test":"mocha -u tdd ./out/tests/; node_modules/.bin/mocha --require jsdoctest out/bashRuntime.js out/handlePath.js","postinstall":"node ./node_modules/vscode/bin/install","package":"vsce package","publish":"vsce publish","release":"standard-version"},"main":"./out/extension","activationEvents":["onDebug","onCommand:extension.bash-debug.getProgramName","onCommand:extension.bash-debug.selectProgramName"],"contributes":{"breakpoints":[{"language":"shellscript"}],"debuggers":[{"type":"bashdb","label":"Bash Debug","program":"./out/bashDebug.js","runtime":"node","configurationAttributes":{"launch":{"// `type`, `request` and `name` are required implicitly.":null,"required":["program"],"properties":{"args":{"// type: Array<string> -> warning `Incorrect type. Expected Array<string>` in launch.json":null,"description":"Command line arguments in array of strings format. (i.e. [\"--opt\", \"arg\"])","default":[]},"argsString":{"// type: string -> warning `Incorrect type. Expected string` in launch.json":null,"description":"Command line arguments in string format. (i.e. \"--opt arg\"]. The arguments in this string will be appended to the arguments of `args`, if present.)","default":""},"cwd":{"type":"string","description":"Working directory. (i.e. `cd $cwd; bashdb <options> $program` will be executed internally).","default":"${workspaceFolder}"},"program":{"type":"string","description":"Absolute path to a script. See also: https://code.visualstudio.com/docs/editor/variables-reference","default":"${file}"},"pathBash":{"type":"string","description":"Specify absolute path to bash. Refer to https://github.com/rogalmic/vscode-bash-debug/blob/master/README.md#usage","default":""},"pathBashdb":{"type":"string","description":"Specify absolute path to bashdb (on Windows, path in Linux Subsystem).","default":"/usr/local/bin/bashdb"},"pathBashdbLib":{"type":"string","description":"Specify absolute path to bashdb libs (on Windows, path in Linux Subsystem).","default":"/usr/share/bashdb"},"pathCat":{"type":"string","description":"Specify absolute path to cat (on Windows, path in Linux Subsystem).","default":"/usr/bin/cat"},"pathMkfifo":{"type":"string","description":"Specify absolute path to mkfifo (on Windows, path in Linux Subsystem).","default":"/usr/bin/mkfifo"},"pathPkill":{"type":"string","description":"Specify absolute path to pkill (on Windows, path in Linux Subsystem). On macOS, please use /usr/bin/pkill instead of /usr/local/bin/pkill, otherwise vscode crashes. see https://github.com/rogalmic/vscode-bash-debug/wiki/macOS:-avoid-use-of--usr-local-bin-pkill for details.","default":"/usr/local/bin/pkill"},"showDebugOutput":{"type":"boolean","description":"Defines if bashdb output will be visible together with script output.","default":true},"trace":{"type":"boolean","description":"Enable logging of the Debug Adapter Protocol.","default":true},"terminalKind":{"enum":["integrated","external","debugConsole"],"description":"Can be set to 'integrated', 'external' or 'debugConsole'. Using 'integrated' or 'external' may require explicit terminal interpreter set for workspace.","default":"debugConsole"},"env":{"type":"object","description":"Environment variables defined as an object with key value pairs - {\"MYVAR\" : \"MY VALUE\"}.","default":{}}}}},"// Template for initial launch.json":null,"// Added when: launch.json is missing && (":null,"//   Add configuration... (in debug pane) -> Bash Debug ||":null,"//   >Debug: Open launch.json -> Bash Debug ||":null,"//   (>Debug: Start Debugging -> Bash Debug && file type is not shellscript)":null,"// )":null,"initialConfigurations":[{"type":"bashdb","request":"launch","name":"Bash-Debug (simplest configuration)","program":"${file}"}],"// Added when select 'Add configuration...' -> 'Bash Debug' in debug pane":null,"// `label` is shown in IntelliSense and `name` is shown in DEBUG side-bar.":null,"configurationSnippets":[{"label":"Bash-Debug (hardcoded script name)","description":"Debug a bash script (specify the path to the script in launch.json)","body":{"type":"bashdb","request":"launch","name":"Bash-Debug (hardcoded script name)","cwd":"^\"\\${workspaceFolder}\"","program":"^\"\\${workspaceFolder}/path/to/script.sh\"","args":[]}},{"label":"Bash-Debug (select script from list of sh files)","description":"Debug a bash script (select script from the list of sh files before starting debug)","body":{"type":"bashdb","request":"launch","name":"Bash-Debug (select script from list of sh files)","cwd":"^\"\\${workspaceFolder}\"","program":"^\"\\${command:SelectScriptName}\"","args":[]}},{"label":"Bash-Debug (type in script name)","description":"Debug a bash script (specify the script path before starting debug)","body":{"type":"bashdb","request":"launch","name":"Bash-Debug (type in script name)","cwd":"^\"\\${workspaceFolder}\"","program":"^\"\\${command:AskForScriptName}\"","args":[]}}],"variables":{"AskForScriptName":"extension.bash-debug.getProgramName","SelectScriptName":"extension.bash-debug.selectProgramName"}}]}},"location":{"$mid":1,"path":"/home/soflyy_cash/.codeoss/extensions/rogalmic.bash-debug-0.3.9-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"rogalmic","metadata":{"installedTimestamp":1743211015565,"pinned":false,"source":"gallery","id":"f4f0748b-9f86-461e-84f9-73bf2e1f91c2","publisherId":"60aabfd6-4033-4422-8bfe-e34a659226cb","publisherDisplayName":"rogalmic","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]}]}