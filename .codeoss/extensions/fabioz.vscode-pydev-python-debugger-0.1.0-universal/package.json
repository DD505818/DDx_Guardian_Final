{
	"name": "vscode-pydev-python-debugger",
	"displayName": "Python Debugger (PyDev)",
	"description": "Python Debugger with the PyDev Debugger (pydevd)",
	"version": "0.1.0",
	"publisher": "fabioz",
	"icon": "icon.png",
	"license": "http://www.pydev.org/vscode/license.html",
	"homepage": "http://www.pydev.org/vscode",
	"repository": {
		"type": "git",
		"url": "https://github.com/fabioz/vscode-pydev-info"
	},
	"engines": {
		"vscode": "^1.65.0"
	},
	"categories": [
		"Debuggers"
	],
	"keywords": [
		"multi-root ready",
		"python",
		"debug",
		"debugging",
		"debugger"
	],
	"activationEvents": [
		"onLanguage:python",
		"onDebugInitialConfigurations",
		"onDebugResolve:pydevd",
		"onDebugDynamicConfigurations:pydevd",
		"onCommand:pydevd.enter.license",
		"onCommand:pydevd.validate.license",
		"onCommand:pydevd.getRunfilesPy",
		"onCommand:pydevd.launchLastPyDevLaunch",
		"onCommand:pydevd.debugLastPyDevLaunch"
	],
	"main": "./out/extension",
	"contributes": {
		"commands": [
			{
				"command": "pydevd.enter.license",
				"title": "Enter License",
				"category": "pydevd"
			},
			{
				"command": "pydevd.validate.license",
				"title": "Validate License",
				"category": "pydevd"
			},
			{
				"command": "pydevd.getRunfilesPy",
				"title": "Gets the runfiles.py in the debugger",
				"category": "pydevd"
			},
			{
				"command": "pydevd.launchLastPyDevLaunch",
				"title": "Re Launch last PyDev launch",
				"category": "pydevd"
			},
			{
				"command": "pydevd.debugLastPyDevLaunch",
				"title": "Re Debug last PyDev launch",
				"category": "pydevd"
			}
		],
		"keybindings": [],
		"configuration": {
			"type": "object",
			"title": "PyDev Debugger Configuration",
			"properties": {
				"python.pydev.debugger.pydevdPyFile": {
					"type": "string",
					"default": "",
					"description": "If specified, must point to the the pydevd.py which should be used to start the debugger (instead of the one directly contributed by the extension)."
				},
				"python.pydev.debugger.pydevdCacheDirectory": {
					"type": "string",
					"default": "",
					"description": "The directory where vscode-python-pydevd will use as a cache (usually it'll pip-install pydevd for the required Python version to have accelerators here). If not specified, it'll use a directory inside of the extension."
				},
				"python.pydev.debugger.pydevdPipInstall": {
					"type": "string",
					"default": "install",
					"description": "Whether to pip-install pydevd using pip in the cache directory to take advantage of accelerators.",
					"enum": [
						"install",
						"no-install"
					]
				}
			}
		},
		"debuggers": [
			{
				"type": "pydevd",
				"label": "PyDev Debugger (Python)",
				"languages": [
					"python"
				],
				"configurationAttributes": {
					"launch": {
						"properties": {
							"args": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								],
								"description": "The command line arguments passed to the program."
							},
							"cwd": {
								"type": "string",
								"description": "The working directory of the program.",
								"default": "${workspaceFolder}"
							},
							"console": {
								"type": "string",
								"enum": [
									"internalConsole",
									"integratedTerminal",
									"externalTerminal"
								],
								"enumDescriptions": [
									"VS Code debug console (input stream not supported).",
									"VS Code integrated terminal.",
									"External terminal that can be configured in user settings."
								],
								"description": "The specified console to launch the program.",
								"default": "integratedTerminal"
							},
							"env": {
								"additionalProperties": {
									"type": "string"
								},
								"default": {},
								"description": "Environment variables (used to launch python as well as the debug adapter).",
								"type": "object"
							},
							"pythonExecutable": {
								"type": "string",
								"description": "The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."
							},
							"pydevdPyDebuggerFile": {
								"type": "string",
								"description": "The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."
							},
							"variablePresentation": {
								"type": "object",
								"description": "The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).",
								"properties": {
									"special": {
										"type": "string",
										"description": "The special variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide special variables.",
											"Create a group for special variables and show variables in the group.",
											"Inline special variables."
										]
									},
									"function": {
										"type": "string",
										"description": "The function variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide function variables.",
											"Create a group for function variables and show variables in the group.",
											"Inline function variables."
										]
									},
									"class": {
										"type": "string",
										"description": "The class variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide class variables.",
											"Create a group for class variables and show variables in the group.",
											"Inline class variables."
										]
									},
									"protected": {
										"type": "string",
										"description": "The protected variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide protected variables.",
											"Create a group for protected variables and show variables in the group.",
											"Inline protected variables."
										]
									}
								}
							},
							"stopAllThreadsOnSuspend": {
								"type": "boolean",
								"description": "Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).",
								"default": false
							},
							"steppingResumesAllThreads": {
								"type": "boolean",
								"description": "Whether to resume all threads when stepping.",
								"default": false
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).",
								"default": false
							},
							"redirectOutput": {
								"type": "boolean",
								"description": "Whether to redirect the output of the program to the debug console.",
								"default": false
							},
							"showReturnValue": {
								"type": "boolean",
								"description": "Whether to show the return value of a function when stepping.",
								"default": false
							},
							"breakOnSystemExitZero": {
								"type": "boolean",
								"description": "When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.",
								"default": false
							},
							"django": {
								"type": "boolean",
								"description": "Whether to enable Django templates debugging.",
								"default": false
							},
							"jinja": {
								"type": "boolean",
								"description": "Whether to enable Jinja templates debugging.",
								"default": false
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Whether to stop on entry.",
								"default": false
							},
							"maxExceptionStackFrames": {
								"type": "number",
								"description": "The maximum number of frames to show in the exception stack trace (0 means unlimited).",
								"default": 0
							},
							"guiEventLoop": {
								"type": "string",
								"description": "The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').",
								"default": "matplotlib"
							},
							"resolveSymlinks": {
								"type": "boolean",
								"description": "Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).",
								"default": false
							},
							"pathMappings": {
								"type": "array",
								"description": "A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).",
								"items": {
									"type": "object",
									"properties": {
										"localRoot": {
											"type": "string"
										},
										"remoteRoot": {
											"type": "string"
										}
									}
								}
							},
							"autoReload": {
								"type": "object",
								"description": "Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.",
								"properties": {
									"enable": {
										"type": "boolean",
										"default": false,
										"description": "Whether to enable auto reload."
									},
									"watchDirectories": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [],
										"description": "The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."
									},
									"pollingInterval": {
										"type": "number",
										"default": 1,
										"description": "The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."
									},
									"exclude": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/.git/**",
											"**/__pycache__/**",
											"**/node_modules/**",
											"**/.metadata/**",
											"**/site-packages/**"
										],
										"description": "The patterns to exclude from the watch directories."
									},
									"include": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/*.py",
											"**/*.pyw"
										],
										"description": "The patterns to include in the watch directories."
									}
								}
							},
							"rules": {
								"type": "array",
								"description": "The exclusion/inclusion rules to be used by the debugger.",
								"items": {
									"type": "object"
								},
								"properties": {
									"include": {
										"type": "boolean"
									},
									"path": {
										"type": "string",
										"description": "The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."
									},
									"module": {
										"type": "string",
										"description": "The module name to be included/excluded (example: `my.module.name`)."
									}
								}
							},
							"program": {
								"type": "string",
								"description": "The .py file that should be debugged."
							},
							"module": {
								"type": "string",
								"description": "The module entry point to be run."
							}
						},
						"oneOf": [
							{
								"required": [
									"program"
								]
							},
							{
								"required": [
									"module"
								]
							}
						]
					},
					"attach": {
						"required": [
							"port",
							"mode"
						],
						"properties": {
							"host": {
								"default": "127.0.0.1",
								"description": "Hostname or IP address to connect to.",
								"type": "string"
							},
							"port": {
								"description": "Port which pydevd should connect to (in server mode) or the port to connect to (in client mode).",
								"type": [
									"number",
									"string"
								],
								"default": "5678"
							},
							"mode": {
								"type": "string",
								"enum": [
									"client",
									"server"
								],
								"enumDescriptions": [
									"Connects to a pydevd session which is waiting for the connection.",
									"Creates a server which waits for incoming connections from pydevd."
								],
								"description": "The attach mode, which decides whether the client will connect to the server or vice-versa.",
								"default": "server"
							},
							"env": {
								"additionalProperties": {
									"type": "string"
								},
								"default": {},
								"description": "Environment variables (used to launch python as well as the debug adapter).",
								"type": "object"
							},
							"pythonExecutable": {
								"type": "string",
								"description": "The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."
							},
							"pydevdPyDebuggerFile": {
								"type": "string",
								"description": "The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."
							},
							"variablePresentation": {
								"type": "object",
								"description": "The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).",
								"properties": {
									"special": {
										"type": "string",
										"description": "The special variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide special variables.",
											"Create a group for special variables and show variables in the group.",
											"Inline special variables."
										]
									},
									"function": {
										"type": "string",
										"description": "The function variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide function variables.",
											"Create a group for function variables and show variables in the group.",
											"Inline function variables."
										]
									},
									"class": {
										"type": "string",
										"description": "The class variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide class variables.",
											"Create a group for class variables and show variables in the group.",
											"Inline class variables."
										]
									},
									"protected": {
										"type": "string",
										"description": "The protected variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide protected variables.",
											"Create a group for protected variables and show variables in the group.",
											"Inline protected variables."
										]
									}
								}
							},
							"stopAllThreadsOnSuspend": {
								"type": "boolean",
								"description": "Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).",
								"default": false
							},
							"steppingResumesAllThreads": {
								"type": "boolean",
								"description": "Whether to resume all threads when stepping.",
								"default": false
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).",
								"default": false
							},
							"redirectOutput": {
								"type": "boolean",
								"description": "Whether to redirect the output of the program to the debug console.",
								"default": false
							},
							"showReturnValue": {
								"type": "boolean",
								"description": "Whether to show the return value of a function when stepping.",
								"default": false
							},
							"breakOnSystemExitZero": {
								"type": "boolean",
								"description": "When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.",
								"default": false
							},
							"django": {
								"type": "boolean",
								"description": "Whether to enable Django templates debugging.",
								"default": false
							},
							"jinja": {
								"type": "boolean",
								"description": "Whether to enable Jinja templates debugging.",
								"default": false
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Whether to stop on entry.",
								"default": false
							},
							"maxExceptionStackFrames": {
								"type": "number",
								"description": "The maximum number of frames to show in the exception stack trace (0 means unlimited).",
								"default": 0
							},
							"guiEventLoop": {
								"type": "string",
								"description": "The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').",
								"default": "matplotlib"
							},
							"resolveSymlinks": {
								"type": "boolean",
								"description": "Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).",
								"default": false
							},
							"pathMappings": {
								"type": "array",
								"description": "A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).",
								"items": {
									"type": "object",
									"properties": {
										"localRoot": {
											"type": "string"
										},
										"remoteRoot": {
											"type": "string"
										}
									}
								}
							},
							"autoReload": {
								"type": "object",
								"description": "Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.",
								"properties": {
									"enable": {
										"type": "boolean",
										"default": false,
										"description": "Whether to enable auto reload."
									},
									"watchDirectories": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [],
										"description": "The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."
									},
									"pollingInterval": {
										"type": "number",
										"default": 1,
										"description": "The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."
									},
									"exclude": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/.git/**",
											"**/__pycache__/**",
											"**/node_modules/**",
											"**/.metadata/**",
											"**/site-packages/**"
										],
										"description": "The patterns to exclude from the watch directories."
									},
									"include": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/*.py",
											"**/*.pyw"
										],
										"description": "The patterns to include in the watch directories."
									}
								}
							},
							"rules": {
								"type": "array",
								"description": "The exclusion/inclusion rules to be used by the debugger.",
								"items": {
									"type": "object"
								},
								"properties": {
									"include": {
										"type": "boolean"
									},
									"path": {
										"type": "string",
										"description": "The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."
									},
									"module": {
										"type": "string",
										"description": "The module name to be included/excluded (example: `my.module.name`)."
									}
								}
							}
						}
					},
					"test-template": {
						"properties": {
							"args": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								],
								"description": "The command line arguments passed to the program."
							},
							"cwd": {
								"type": "string",
								"description": "The working directory of the program.",
								"default": "${workspaceFolder}"
							},
							"console": {
								"type": "string",
								"enum": [
									"internalConsole",
									"integratedTerminal",
									"externalTerminal"
								],
								"enumDescriptions": [
									"VS Code debug console (input stream not supported).",
									"VS Code integrated terminal.",
									"External terminal that can be configured in user settings."
								],
								"description": "The specified console to launch the program.",
								"default": "integratedTerminal"
							},
							"env": {
								"additionalProperties": {
									"type": "string"
								},
								"default": {},
								"description": "Environment variables (used to launch python as well as the debug adapter).",
								"type": "object"
							},
							"pythonExecutable": {
								"type": "string",
								"description": "The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."
							},
							"pydevdPyDebuggerFile": {
								"type": "string",
								"description": "The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."
							},
							"variablePresentation": {
								"type": "object",
								"description": "The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).",
								"properties": {
									"special": {
										"type": "string",
										"description": "The special variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide special variables.",
											"Create a group for special variables and show variables in the group.",
											"Inline special variables."
										]
									},
									"function": {
										"type": "string",
										"description": "The function variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide function variables.",
											"Create a group for function variables and show variables in the group.",
											"Inline function variables."
										]
									},
									"class": {
										"type": "string",
										"description": "The class variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide class variables.",
											"Create a group for class variables and show variables in the group.",
											"Inline class variables."
										]
									},
									"protected": {
										"type": "string",
										"description": "The protected variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide protected variables.",
											"Create a group for protected variables and show variables in the group.",
											"Inline protected variables."
										]
									}
								}
							},
							"stopAllThreadsOnSuspend": {
								"type": "boolean",
								"description": "Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).",
								"default": false
							},
							"steppingResumesAllThreads": {
								"type": "boolean",
								"description": "Whether to resume all threads when stepping.",
								"default": false
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).",
								"default": false
							},
							"redirectOutput": {
								"type": "boolean",
								"description": "Whether to redirect the output of the program to the debug console.",
								"default": false
							},
							"showReturnValue": {
								"type": "boolean",
								"description": "Whether to show the return value of a function when stepping.",
								"default": false
							},
							"breakOnSystemExitZero": {
								"type": "boolean",
								"description": "When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.",
								"default": false
							},
							"django": {
								"type": "boolean",
								"description": "Whether to enable Django templates debugging.",
								"default": false
							},
							"jinja": {
								"type": "boolean",
								"description": "Whether to enable Jinja templates debugging.",
								"default": false
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Whether to stop on entry.",
								"default": false
							},
							"maxExceptionStackFrames": {
								"type": "number",
								"description": "The maximum number of frames to show in the exception stack trace (0 means unlimited).",
								"default": 0
							},
							"guiEventLoop": {
								"type": "string",
								"description": "The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').",
								"default": "matplotlib"
							},
							"resolveSymlinks": {
								"type": "boolean",
								"description": "Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).",
								"default": false
							},
							"pathMappings": {
								"type": "array",
								"description": "A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).",
								"items": {
									"type": "object",
									"properties": {
										"localRoot": {
											"type": "string"
										},
										"remoteRoot": {
											"type": "string"
										}
									}
								}
							},
							"autoReload": {
								"type": "object",
								"description": "Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.",
								"properties": {
									"enable": {
										"type": "boolean",
										"default": false,
										"description": "Whether to enable auto reload."
									},
									"watchDirectories": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [],
										"description": "The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."
									},
									"pollingInterval": {
										"type": "number",
										"default": 1,
										"description": "The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."
									},
									"exclude": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/.git/**",
											"**/__pycache__/**",
											"**/node_modules/**",
											"**/.metadata/**",
											"**/site-packages/**"
										],
										"description": "The patterns to exclude from the watch directories."
									},
									"include": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/*.py",
											"**/*.pyw"
										],
										"description": "The patterns to include in the watch directories."
									}
								}
							},
							"rules": {
								"type": "array",
								"description": "The exclusion/inclusion rules to be used by the debugger.",
								"items": {
									"type": "object"
								},
								"properties": {
									"include": {
										"type": "boolean"
									},
									"path": {
										"type": "string",
										"description": "The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."
									},
									"module": {
										"type": "string",
										"description": "The module name to be included/excluded (example: `my.module.name`)."
									}
								}
							}
						}
					},
					"run-file-template": {
						"properties": {
							"args": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								],
								"description": "The command line arguments passed to the program."
							},
							"cwd": {
								"type": "string",
								"description": "The working directory of the program.",
								"default": "${workspaceFolder}"
							},
							"console": {
								"type": "string",
								"enum": [
									"internalConsole",
									"integratedTerminal",
									"externalTerminal"
								],
								"enumDescriptions": [
									"VS Code debug console (input stream not supported).",
									"VS Code integrated terminal.",
									"External terminal that can be configured in user settings."
								],
								"description": "The specified console to launch the program.",
								"default": "integratedTerminal"
							},
							"env": {
								"additionalProperties": {
									"type": "string"
								},
								"default": {},
								"description": "Environment variables (used to launch python as well as the debug adapter).",
								"type": "object"
							},
							"pythonExecutable": {
								"type": "string",
								"description": "The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."
							},
							"pydevdPyDebuggerFile": {
								"type": "string",
								"description": "The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."
							},
							"variablePresentation": {
								"type": "object",
								"description": "The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).",
								"properties": {
									"special": {
										"type": "string",
										"description": "The special variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide special variables.",
											"Create a group for special variables and show variables in the group.",
											"Inline special variables."
										]
									},
									"function": {
										"type": "string",
										"description": "The function variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide function variables.",
											"Create a group for function variables and show variables in the group.",
											"Inline function variables."
										]
									},
									"class": {
										"type": "string",
										"description": "The class variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide class variables.",
											"Create a group for class variables and show variables in the group.",
											"Inline class variables."
										]
									},
									"protected": {
										"type": "string",
										"description": "The protected variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide protected variables.",
											"Create a group for protected variables and show variables in the group.",
											"Inline protected variables."
										]
									}
								}
							},
							"stopAllThreadsOnSuspend": {
								"type": "boolean",
								"description": "Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).",
								"default": false
							},
							"steppingResumesAllThreads": {
								"type": "boolean",
								"description": "Whether to resume all threads when stepping.",
								"default": false
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).",
								"default": false
							},
							"redirectOutput": {
								"type": "boolean",
								"description": "Whether to redirect the output of the program to the debug console.",
								"default": false
							},
							"showReturnValue": {
								"type": "boolean",
								"description": "Whether to show the return value of a function when stepping.",
								"default": false
							},
							"breakOnSystemExitZero": {
								"type": "boolean",
								"description": "When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.",
								"default": false
							},
							"django": {
								"type": "boolean",
								"description": "Whether to enable Django templates debugging.",
								"default": false
							},
							"jinja": {
								"type": "boolean",
								"description": "Whether to enable Jinja templates debugging.",
								"default": false
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Whether to stop on entry.",
								"default": false
							},
							"maxExceptionStackFrames": {
								"type": "number",
								"description": "The maximum number of frames to show in the exception stack trace (0 means unlimited).",
								"default": 0
							},
							"guiEventLoop": {
								"type": "string",
								"description": "The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').",
								"default": "matplotlib"
							},
							"resolveSymlinks": {
								"type": "boolean",
								"description": "Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).",
								"default": false
							},
							"pathMappings": {
								"type": "array",
								"description": "A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).",
								"items": {
									"type": "object",
									"properties": {
										"localRoot": {
											"type": "string"
										},
										"remoteRoot": {
											"type": "string"
										}
									}
								}
							},
							"autoReload": {
								"type": "object",
								"description": "Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.",
								"properties": {
									"enable": {
										"type": "boolean",
										"default": false,
										"description": "Whether to enable auto reload."
									},
									"watchDirectories": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [],
										"description": "The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."
									},
									"pollingInterval": {
										"type": "number",
										"default": 1,
										"description": "The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."
									},
									"exclude": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/.git/**",
											"**/__pycache__/**",
											"**/node_modules/**",
											"**/.metadata/**",
											"**/site-packages/**"
										],
										"description": "The patterns to exclude from the watch directories."
									},
									"include": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/*.py",
											"**/*.pyw"
										],
										"description": "The patterns to include in the watch directories."
									}
								}
							},
							"rules": {
								"type": "array",
								"description": "The exclusion/inclusion rules to be used by the debugger.",
								"items": {
									"type": "object"
								},
								"properties": {
									"include": {
										"type": "boolean"
									},
									"path": {
										"type": "string",
										"description": "The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."
									},
									"module": {
										"type": "string",
										"description": "The module name to be included/excluded (example: `my.module.name`)."
									}
								}
							}
						}
					},
					"base-template": {
						"properties": {
							"args": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								],
								"description": "The command line arguments passed to the program."
							},
							"cwd": {
								"type": "string",
								"description": "The working directory of the program.",
								"default": "${workspaceFolder}"
							},
							"console": {
								"type": "string",
								"enum": [
									"internalConsole",
									"integratedTerminal",
									"externalTerminal"
								],
								"enumDescriptions": [
									"VS Code debug console (input stream not supported).",
									"VS Code integrated terminal.",
									"External terminal that can be configured in user settings."
								],
								"description": "The specified console to launch the program.",
								"default": "integratedTerminal"
							},
							"env": {
								"additionalProperties": {
									"type": "string"
								},
								"default": {},
								"description": "Environment variables (used to launch python as well as the debug adapter).",
								"type": "object"
							},
							"pythonExecutable": {
								"type": "string",
								"description": "The python executable to be used to launch the script. If not given the value of `python.pydev.pythonExecutable` will be used."
							},
							"pydevdPyDebuggerFile": {
								"type": "string",
								"description": "The pydevd.py file to be used to start the debugger. If not given, the value of `python.pydev.debugger.pydevdPyFile` will be used. If also not available, default heuristics to obtain the pydevd.py file will be used."
							},
							"variablePresentation": {
								"type": "object",
								"description": "The variable presentation settings (note: if not defined in the launch configuration, the value of `python.pydev.debugger.variablePresentation` setting will be used).",
								"properties": {
									"special": {
										"type": "string",
										"description": "The special variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide special variables.",
											"Create a group for special variables and show variables in the group.",
											"Inline special variables."
										]
									},
									"function": {
										"type": "string",
										"description": "The function variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide function variables.",
											"Create a group for function variables and show variables in the group.",
											"Inline function variables."
										]
									},
									"class": {
										"type": "string",
										"description": "The class variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide class variables.",
											"Create a group for class variables and show variables in the group.",
											"Inline class variables."
										]
									},
									"protected": {
										"type": "string",
										"description": "The protected variable presentation settings.",
										"enum": [
											"hide",
											"group",
											"inline"
										],
										"enumDescriptions": [
											"Hide protected variables.",
											"Create a group for protected variables and show variables in the group.",
											"Inline protected variables."
										]
									}
								}
							},
							"stopAllThreadsOnSuspend": {
								"type": "boolean",
								"description": "Whether to stop all threads when a thread is suspended (due to a breakpoint or a step).",
								"default": false
							},
							"steppingResumesAllThreads": {
								"type": "boolean",
								"description": "Whether to resume all threads when stepping.",
								"default": false
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Whether the debugger should only step through the user's code (if True the debugger will not stop in libraries).",
								"default": false
							},
							"redirectOutput": {
								"type": "boolean",
								"description": "Whether to redirect the output of the program to the debug console.",
								"default": false
							},
							"showReturnValue": {
								"type": "boolean",
								"description": "Whether to show the return value of a function when stepping.",
								"default": false
							},
							"breakOnSystemExitZero": {
								"type": "boolean",
								"description": "When tracking exceptions and this is true, the debugger will not break on SystemExit with a code of 0.",
								"default": false
							},
							"django": {
								"type": "boolean",
								"description": "Whether to enable Django templates debugging.",
								"default": false
							},
							"jinja": {
								"type": "boolean",
								"description": "Whether to enable Jinja templates debugging.",
								"default": false
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Whether to stop on entry.",
								"default": false
							},
							"maxExceptionStackFrames": {
								"type": "number",
								"description": "The maximum number of frames to show in the exception stack trace (0 means unlimited).",
								"default": 0
							},
							"guiEventLoop": {
								"type": "string",
								"description": "The GUI event loop to be used. When set, the debugger will use the specified GUI event loop when a breakpoint is hit in the main thread to leave the windows interactive. Common values supported are: 'matplotlib', 'wx', 'qt' , 'qt4', 'qt5', 'qt6', 'gtk', 'tk', 'osx', 'glut', 'pyglet', 'gtk3', 'none'. It may also be the path to a custom function (such as 'my_program.event_loop').",
								"default": "matplotlib"
							},
							"resolveSymlinks": {
								"type": "boolean",
								"description": "Whether to resolve symlinks (this would make it so that the debugger always maps to the real file, even if it's a symlink, instead of showing the path that's actually being debugged).",
								"default": false
							},
							"pathMappings": {
								"type": "array",
								"description": "A list of path mappings to be used by the debugger (should be used when doing a remote debug session to translate the paths from that machine to the current local machine so that breakpoints paths are translated to the target machine correctly, as well as to show the proper files being hit locally).",
								"items": {
									"type": "object",
									"properties": {
										"localRoot": {
											"type": "string"
										},
										"remoteRoot": {
											"type": "string"
										}
									}
								}
							},
							"autoReload": {
								"type": "object",
								"description": "Settings for enabling auto reload (note: auto-reload will try its best to do an auto-reload in the current working program, but it's not guaranteed to work in all cases). See: https://github.com/fabioz/PyDev.Debugger/blob/main/_pydevd_bundle/pydevd_reload.py for more details.",
								"properties": {
									"enable": {
										"type": "boolean",
										"default": false,
										"description": "Whether to enable auto reload."
									},
									"watchDirectories": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [],
										"description": "The directories to watch for changes (if not given it'll be computed based on the cwd and program given)."
									},
									"pollingInterval": {
										"type": "number",
										"default": 1,
										"description": "The polling interval in seconds (if not given it'll be computed based on the cwd and program given)."
									},
									"exclude": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/.git/**",
											"**/__pycache__/**",
											"**/node_modules/**",
											"**/.metadata/**",
											"**/site-packages/**"
										],
										"description": "The patterns to exclude from the watch directories."
									},
									"include": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"default": [
											"**/*.py",
											"**/*.pyw"
										],
										"description": "The patterns to include in the watch directories."
									}
								}
							},
							"rules": {
								"type": "array",
								"description": "The exclusion/inclusion rules to be used by the debugger.",
								"items": {
									"type": "object"
								},
								"properties": {
									"include": {
										"type": "boolean"
									},
									"path": {
										"type": "string",
										"description": "The glob pattern which will be matched against the path to be included/excluded (example: `**/generated/*.py`)."
									},
									"module": {
										"type": "string",
										"description": "The module name to be included/excluded (example: `my.module.name`)."
									}
								}
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "PyDev: Launch Python Program",
						"description": "Add a new configuration which will launch a python program with the PyDev debugger.",
						"body": {
							"type": "pydevd",
							"name": "PyDev Debug (Launch)",
							"request": "launch",
							"cwd": "^\"\\${workspaceFolder}\"",
							"console": "integratedTerminal",
							"program": "^\"\\${file}\"",
							"args": ""
						}
					},
					{
						"label": "PyDev: Wait for Python Program Attach",
						"description": "Add a new configuration which will start a server and wait for Python to attach to the given port.",
						"body": {
							"type": "pydevd",
							"name": "PyDev Debug (Wait For Attach)",
							"request": "attach",
							"cwd": "^\"\\${workspaceFolder}\"",
							"port": "5678",
							"mode": "server"
						}
					},
					{
						"label": "PyDev: Attach to Python Program",
						"description": "Add a new configuration which will attach to a Python program (which must be already waiting for the attach).",
						"body": {
							"type": "pydevd",
							"name": "PyDev Debug (Wait For Attach)",
							"request": "attach",
							"cwd": "^\"\\${workspaceFolder}\"",
							"host": "localhost",
							"port": "5678",
							"mode": "client"
						}
					},
					{
						"label": "PyDev: Customize Test (Template)",
						"description": "Add a new configuration which will serve as a template for tests (to customize pytest arguments or environment variables for instance).",
						"body": {
							"type": "pydevd",
							"name": "PyDev Test Template",
							"request": "test-template",
							"env": {},
							"args": []
						}
					},
					{
						"label": "PyDev: Customize Run File (Template)",
						"description": "Add a new configuration which will serve as a template for run file from command palette or code lenses (to customize arguments or environment variables for instance).",
						"body": {
							"type": "pydevd",
							"name": "PyDev Run File Template",
							"request": "run-file-template",
							"env": {},
							"args": []
						}
					},
					{
						"label": "PyDev: Customize All Launch Configurations (Template)",
						"description": "Add a new configuration which will serve as a template for all launch configurations (to customize the variable presentation or environment variables for instance).",
						"body": {
							"type": "pydevd",
							"name": "PyDev Base Template",
							"request": "base-template",
							"env": {},
							"args": [],
							"variablePresentation": {
								"special": "hide",
								"function": "hide",
								"class": "hide",
								"protected": "inline"
							}
						}
					}
				]
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "pydevd.getRunfilesPy",
					"when": "false"
				}
			]
		},
		"breakpoints": [
			{
				"language": "python"
			},
			{
				"language": "html"
			},
			{
				"language": "djhtml"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run -S esbuild-base -- --minify",
		"esbuild-base": "rimraf out && esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
		"build": "npm run -S esbuild-base -- --sourcemap",
		"watch": "npm run -S esbuild-base -- --sourcemap --watch",
		"fmt": "prettier --write \"src/**/*.ts\"&& npm run test -- --fix",
		"test": "eslint src --ext ts && tsc --noEmit"
	},
	"prettier": {
		"tabWidth": 4,
		"printWidth": 120,
		"quoteProps": "preserve"
	},
	"devDependencies": {
		"@types/mocha": "^2.2.32",
		"@types/node": "^16.0.00",
		"@types/vscode": "1.65.0",
		"typescript": "^4.9.4",
		"@typescript-eslint/eslint-plugin": "^5.47.1",
		"@typescript-eslint/parser": "^5.47.1",
		"esbuild": "^0.16.11",
		"eslint": "^8.30.0",
		"eslint-plugin-header": "^3.1.1",
		"prettier": "^2.8.1",
		"rimraf": "^3.0.2"
	},
	"dependencies": {
		"vscode-languageclient": "^3.4.5",
		"vscode-nls": "^4.1.2",
		"tmp": "^0.0.31",
		"path-exists": "^3.0.0",
		"expand-home-dir": "^0.0.3",
		"http-proxy-agent": "^2.1.0",
		"https-proxy-agent": "^2.2.4",
		"glob": "^7.1.1",
		"big-integer": "1.6.52"
	},
	"__metadata": {
		"id": "bca40694-3c64-47da-a1e0-32a9cfcda8a6",
		"publisherId": "ed312bf9-1a46-492d-a796-9b89fb8405cf",
		"publisherDisplayName": "fabioz",
		"targetPlatform": "universal",
		"isApplicationScoped": false,
		"isPreReleaseVersion": false,
		"hasPreReleaseVersion": false,
		"installedTimestamp": 1743211003207,
		"pinned": false,
		"preRelease": false,
		"source": "gallery"
	}
}